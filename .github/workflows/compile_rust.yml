name: Build and Release Scarlet

on:
    push:
        branches:
            - main
        tags:
            - 'v*'

jobs:
    release:
        runs-on: ${{ matrix.os }}

        strategy:
            matrix:
                os: [ macos-latest, windows-latest ]

        steps:
            -   name: Check out Git repository
                uses: actions/checkout@v4

            -   name: Install Node.js
                uses: actions/setup-node@v4
                with:
                    node-version: 'latest'

            -   name: Cache npm dependencies
                uses: actions/cache@v3
                with:
                    path: ~/.npm
                    key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
                    restore-keys: |
                        ${{ runner.OS }}-node-

            -   name: Install Rust
                uses: dtolnay/rust-toolchain@stable
                with:
                    toolchain: stable
                    targets: ${{ matrix.os == 'macos-latest' && 'x86_64-apple-darwin' || 'x86_64-pc-windows-msvc' }}
            -   name: Cache Rust dependencies
                uses: actions/cache@v3
                with:
                    path: |
                        ~/.cargo/registry
                        ~/.cargo/git
                        target
                    key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-cargo-
            -   name: Install dependencies
                run: npm ci

            -   name: Build Rust library
                run: npm run build:agent:release

            -   name: Build/release Electron app
                uses: samuelmeuli/action-electron-builder@v1
                with:
                    # GitHub token, automatically provided to the action
                    # (No need to define this secret in the repo settings)
                    github_token: ${{ secrets.github_token }}

                    # If the commit is tagged with a version (e.g. "v1.0.0"),
                    # release the app after building
                    release: ${{ startsWith(github.ref, 'refs/tags/v') }}

                    # Use the appropriate build script based on the OS
                    build_script_name: ${{ matrix.os == 'macos-latest' && 'release:mac' || 'release:win' }}

                env:
                    # Auto-update GH_TOKEN (optional)
                    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}